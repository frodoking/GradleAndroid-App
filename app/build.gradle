apply plugin: 'com.android.application'

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String

    defaultConfig {
        applicationId "com.android.app"
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode VERSION_CODE as int
        versionName VERSION_NAME as String
        multiDexEnabled false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    signingConfigs {
        debug {
        }
        release {
            storeFile file("app.keystore")
            storePassword "Showmethemoney"
            keyAlias "bnsale"
            keyPassword "Showmethemoney"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            buildConfigField "boolean", "ISDEBUG", "false"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            shrinkResources false
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "ISDEBUG", "true"
        }
    }

    productFlavors {
        baidu {
        }
        /*
        '360' {
        }
        wandoujia {
        }
        '91' {
        }
        */
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [BaiduMobAd_CHANNEL_VALUE: name]
    }
    applicationVariants.all { variant ->
        def Date currentTime = new Date();
        def java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
        def String dateString = formatter.format(currentTime);
        variant.outputs.each { output ->
            def String tmpName
            def String fileName
            if (variant.name.contains("Release")) {
                tmpName = variant.name.replace("Release", "");
                fileName = "app_${tmpName}_${defaultConfig.versionName}_${dateString}_release";
            } else {
                tmpName = variant.name.replace("Debug", "");
                fileName = "app_${tmpName}_${defaultConfig.versionName}_${dateString}_debug";
            }
            output.outputFile = file("$project.buildDir/${fileName}.apk")
        }
    }
}

repositories { flatDir { dirs 'libs' } }

dependencies {
    compile project(":function")
    compile project(":custom")
    compile project(":test")
    compile project(":theme")
    compile project(":plugin:pluginhost")
}
